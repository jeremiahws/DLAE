# Copyright 2019 Jeremiah Sanders.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""dlae/gui/view_menu/internal_parameters.py"""


import tkinter as tk


class InternalParameters:
    def __init__(self, controller):
        self.controller = controller

        self.tl_parameters = tk.Toplevel()
        self.tl_parameters.title('Internal parameter states')
        self.tl_parameters.wm_protocol('WM_DELETE_WINDOW', self.tl_parameters.withdraw)
        self.tl_parameters.resizable(width=False, height=False)

        self.l_config_file = tk.Label(self.tl_parameters, text='Configuration file:', bg='black', fg='white').grid(row=0, column=0, columnspan=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_model_type = tk.Label(self.tl_parameters, text='Model type:').grid(row=1, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_model_type_s = tk.Label(self.tl_parameters, textvariable=self.controller.home_menu.s_model_signal).grid(row=1, column=1, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_config_type = tk.Label(self.tl_parameters, text='File type:').grid(row=2, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_config_type_s = tk.Label(self.tl_parameters, textvariable=self.controller.home_menu.s_type_signal).grid(row=2, column=1, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_input_shape = tk.Label(self.tl_parameters, text='Input size:').grid(row=3, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_input_shape_s = tk.Label(self.tl_parameters, textvariable=self.controller.home_menu.s_input_shape).grid(row=3, column=1, sticky=tk.N+tk.S+tk.E+tk.W)

        self.l_preprocessing = tk.Label(self.tl_parameters, text='Preprocessing:', bg='black', fg='white').grid(row=4, column=0, columnspan=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_min_intensity = tk.Label(self.tl_parameters, text='Minimum image intensity:').grid(row=5, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_min_intensity_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.s_data_min).grid(row=5, column=1, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_max_intensity = tk.Label(self.tl_parameters, text='Maximum image intensity:').grid(row=6, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_max_intensity_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.s_data_max).grid(row=6, column=1, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_context = tk.Label(self.tl_parameters, text='Image context:').grid(row=7, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_context_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.s_image_context).grid(row=7, column=1, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_norm_type = tk.Label(self.tl_parameters, text='Image normalization type:').grid(row=8, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_norm_type_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.s_normalization_type).grid(row=8, column=1, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_to_categorical = tk.Label(self.tl_parameters, text='Convert to categorical:').grid(row=10, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_to_categorical_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.bool_to_categorical).grid(row=10, column=1, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_weight_loss = tk.Label(self.tl_parameters, text='Weight loss function:').grid(row=11, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_weight_loss_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.bool_weight_loss).grid(row=11, column=1, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_reshapeX = tk.Label(self.tl_parameters, text='Reshape X:').grid(row=12, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_reshapeX_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.bool_reshapeX).grid(row=12, column=1, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_reshapeX_dims = tk.Label(self.tl_parameters, text='Reshape X dimensions:').grid(row=13, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_reshapeX_dims_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.s_reshapeX).grid(row=13, column=1, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_permuteX = tk.Label(self.tl_parameters, text='Permute X:').grid(row=14, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_permuteX_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.bool_permuteX).grid(row=14, column=1, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_permuteX_dims = tk.Label(self.tl_parameters, text='Permute X dimensions:').grid(row=15, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_permuteX_dims_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.s_permuteX).grid(row=15, column=1, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_repeatX = tk.Label(self.tl_parameters, text='Repeat X along channels:').grid(row=16, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_repeatX_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.bool_repeatX).grid(row=16, column=1, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_repeatX_num = tk.Label(self.tl_parameters, text='Number of X repetitions:').grid(row=17, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_repeatX_num_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.s_repeatX).grid(row=17, column=1, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_reshapeY = tk.Label(self.tl_parameters, text='Reshape y:').grid(row=18, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_reshapeY_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.bool_reshapeY).grid(row=18, column=1, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_reshapeY_dims = tk.Label(self.tl_parameters, text='Reshape y dimensions:').grid(row=19, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_reshapeY_dims_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.s_reshapeY).grid(row=19, column=1, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_permuteY = tk.Label(self.tl_parameters, text='Permute Y:').grid(row=20, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_permuteY_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.bool_permuteY).grid(row=20, column=1, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_permuteY_dims = tk.Label(self.tl_parameters, text='Permute Y dimensions:').grid(row=21, column=0, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_permuteY_dims_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.s_permuteY).grid(row=21, column=1, sticky=tk.N+tk.S+tk.E+tk.W)

        self.l_loss = tk.Label(self.tl_parameters, text='Loss function:', bg='black', fg='white').grid(row=0, column=2, columnspan=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_loss_type = tk.Label(self.tl_parameters, text='Loss function:').grid(row=1, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_loss_type_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_loss).grid(row=1, column=3, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_param1 = tk.Label(self.tl_parameters, text='Parameter 1:').grid(row=2, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_param1_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_loss_param1).grid(row=2, column=3, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_param2 = tk.Label(self.tl_parameters, text='Parameter 2:').grid(row=3, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_param2_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_loss_param2).grid(row=3, column=3, sticky=tk.N+tk.S+tk.E+tk.W)

        self.l_lr = tk.Label(self.tl_parameters, text='Learning rate:', bg='black', fg='white').grid(row=4, column=2, columnspan=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_base_lr = tk.Label(self.tl_parameters, text='Base learning rate:').grid(row=5, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_base_lr_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_base_lr).grid(row=5, column=3, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_lr_decay = tk.Label(self.tl_parameters, text='Learning rate decay:').grid(row=6, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_lr_decay_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_lr_decay).grid(row=6, column=3, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_decay_on_plateau = tk.Label(self.tl_parameters, text='Decay on plateau:').grid(row=7, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_decay_on_plateau_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.bool_decay_on_plateau).grid(row=7, column=3, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_decay_on_plateau_factor = tk.Label(self.tl_parameters, text='Decay on plateau factor:').grid(row=8, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_decay_on_plateau_factor_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_decay_on_plateau_factor).grid(row=8, column=3, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_decay_on_plateau_patience = tk.Label(self.tl_parameters, text='Decay on plateau patience:').grid(row=9, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_decay_on_plateau_patience_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_decay_on_plateau_patience).grid(row=9, column=3, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_step_decay = tk.Label(self.tl_parameters, text='Step decay:').grid(row=10, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_step_decay_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.bool_step_decay).grid(row=10, column=3, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_step_decay_factor = tk.Label(self.tl_parameters, text='Step decay factor:').grid(row=11, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_step_decay_factor_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_step_decay_factor).grid(row=11, column=3, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_step_decay_period = tk.Label(self.tl_parameters, text='Step decay period:').grid(row=12, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_step_decay_period_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_step_decay_period).grid(row=12, column=3, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_d_lr = tk.Label(self.tl_parameters, text='Discriminator learning rate:').grid(row=13, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_d_lr_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_d_lr).grid(row=13, column=3, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_gan_lr = tk.Label(self.tl_parameters, text='GAN learning rate:').grid(row=14, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_gan_lr_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_gan_lr).grid(row=14, column=3, sticky=tk.N+tk.S+tk.E+tk.W)

        self.l_optimizer = tk.Label(self.tl_parameters, text='Optimizer:', bg='black', fg='white').grid(row=15, column=2, columnspan=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_optimizer_type = tk.Label(self.tl_parameters, text='Optimizer:').grid(row=16, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_optimizer_type_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_optimizer).grid(row=16, column=3, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_optimizer_beta1 = tk.Label(self.tl_parameters, text='Optimizer beta1:').grid(row=17, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_optimizer_beta1_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_optimizer_beta1).grid(row=17, column=3, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_optimizer_beta2 = tk.Label(self.tl_parameters, text='Optimizer beta2:').grid(row=18, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_optimizer_beta2_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_optimizer_beta2).grid(row=18, column=3, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_optimizer_rho = tk.Label(self.tl_parameters, text='Optimizer rho:').grid(row=19, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_optimizer_rho_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_optimizer_rho).grid(row=19, column=3, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_optimizer_momentum = tk.Label(self.tl_parameters, text='Optimizer momentum:').grid(row=20, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_optimizer_momentum_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_optimizer_momentum).grid(row=20, column=3, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_optimizer_epsilon = tk.Label(self.tl_parameters, text='Optimizer epsilon:').grid(row=21, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_optimizer_epsilon_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_optimizer_epsilon).grid(row=21, column=3, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_d_optimizer = tk.Label(self.tl_parameters, text='Discriminator optimizer:').grid(row=22, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_d_optimizer_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_d_optimizer).grid(row=22, column=3, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_gan_optimizer = tk.Label(self.tl_parameters, text='GAN optimizer:').grid(row=23, column=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_gan_optimizer_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_gan_optimizer).grid(row=23, column=3, sticky=tk.N+tk.S+tk.E+tk.W)

        self.l_options = tk.Label(self.tl_parameters, text='Training options:', bg='black', fg='white').grid(row=0, column=4, columnspan=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_hardware = tk.Label(self.tl_parameters, text='Hardware:').grid(row=1, column=4, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_hardware_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_hardware).grid(row=1, column=5, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_n_gpus = tk.Label(self.tl_parameters, text='Number of GPUs:').grid(row=2, column=4, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_n_gpus_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_n_gpus).grid(row=2, column=5, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_early_stop = tk.Label(self.tl_parameters, text='Early stop:').grid(row=3, column=4, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_early_stop_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.bool_early_stop).grid(row=3, column=5, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_early_stop_patience = tk.Label(self.tl_parameters, text='Early stop patience:').grid(row=4, column=4, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_early_stop_patience_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_early_stop_patience).grid(row=4, column=5, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_batch_size = tk.Label(self.tl_parameters, text='Batch size:').grid(row=5, column=4, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_batch_size_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_batch_size).grid(row=5, column=5, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_epochs = tk.Label(self.tl_parameters, text='Epochs:').grid(row=6, column=4, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_epochs_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_epochs).grid(row=6, column=5, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_shuffle_data = tk.Label(self.tl_parameters, text='Shuffle data:').grid(row=7, column=4, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_shuffle_data_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.bool_shuffle).grid(row=7, column=5, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_validation_split = tk.Label(self.tl_parameters, text='Validation split:').grid(row=8, column=4, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_validation_split_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_val_split).grid(row=8, column=5, sticky=tk.N+tk.S+tk.E+tk.W)

        self.l_monitors = tk.Label(self.tl_parameters, text='Training monitors:', bg='black', fg='white').grid(row=9, column=4, columnspan=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_mse = tk.Label(self.tl_parameters, text='MSE:').grid(row=10, column=4, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_mse_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.bool_mse_monitor).grid(row=10, column=5, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_mae = tk.Label(self.tl_parameters, text='MAE:').grid(row=11, column=4, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_mae_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.bool_mae_monitor).grid(row=11, column=5, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_acc = tk.Label(self.tl_parameters, text='Accuracy:').grid(row=12, column=4, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_acc_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.bool_acc_monitor).grid(row=12, column=5, sticky=tk.N+tk.S+tk.E+tk.W)

        self.l_save_configs = tk.Label(self.tl_parameters, text='Save configurations:', bg='black', fg='white').grid(row=13, column=4, columnspan=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_save_model = tk.Label(self.tl_parameters, text='Save model:').grid(row=14, column=4, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_save_model_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.bool_save_model).grid(row=14, column=5, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_save_csv = tk.Label(self.tl_parameters, text='Save CSV:').grid(row=15, column=4, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_save_csv_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.bool_save_csv).grid(row=15, column=5, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_save_ckpt = tk.Label(self.tl_parameters, text='Save checkpoints:').grid(row=16, column=4, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_save_ckpt_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.bool_save_checkpoints).grid(row=16, column=5, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_save_ckpt_frequency = tk.Label(self.tl_parameters, text='Save checkpoints frequency:').grid(row=17, column=4, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_save_ckpt_frequency_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_save_checkpoints_frequency).grid(row=17, column=5, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_save_tensorboard = tk.Label(self.tl_parameters, text='Save TensorBoard:').grid(row=18, column=4, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_save_tensorboard_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.bool_tensorboard).grid(row=18, column=5, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_save_tensorboard_frequency = tk.Label(self.tl_parameters, text='Save TensorBoard frequency:').grid(row=19, column=4, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_save_tensorboard_frequency_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_tensorboard_frequency).grid(row=19, column=5, sticky=tk.N+tk.S+tk.E+tk.W)

        self.l_bbd_options = tk.Label(self.tl_parameters, text='BBD options:', bg='black', fg='white').grid(row=0, column=6, columnspan=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_scaling = tk.Label(self.tl_parameters, text='Scaling:').grid(row=1, column=6, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_scaling_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_scaling).grid(row=1, column=7, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_scales = tk.Label(self.tl_parameters, text='Scales:').grid(row=2, column=6, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_scales_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_scales).grid(row=2, column=7, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_aspect_ratios_type = tk.Label(self.tl_parameters, text='Aspect ratios type:').grid(row=3, column=6, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_aspect_ratios_type_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_aspect_ratios).grid(row=3, column=7, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_aspect_ratios = tk.Label(self.tl_parameters, text='Aspect ratios:').grid(row=4, column=6, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_aspect_ratios_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_ARs).grid(row=4, column=7, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_n_classes = tk.Label(self.tl_parameters, text='Number of classes:').grid(row=5, column=6, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_n_classes_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_n_classes).grid(row=5, column=7, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_steps = tk.Label(self.tl_parameters, text='Steps:').grid(row=6, column=6, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_steps_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_steps).grid(row=6, column=7, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_offsets = tk.Label(self.tl_parameters, text='Offsets:').grid(row=7, column=6, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_offsets_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_offsets).grid(row=7, column=7, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_variances = tk.Label(self.tl_parameters, text='Variances:').grid(row=8, column=6, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_variances_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_offsets).grid(row=8, column=7, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_conf_thresh = tk.Label(self.tl_parameters, text='Confidence threshold:').grid(row=9, column=6, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_conf_thresh_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_conf_thresh).grid(row=9, column=7, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_iou_thresh = tk.Label(self.tl_parameters, text='IoU threshold:').grid(row=10, column=6, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_iou_thresh_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_iou_thresh).grid(row=10, column=7, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_top_k = tk.Label(self.tl_parameters, text='Top k:').grid(row=11, column=6, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_top_k_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_top_k).grid(row=11, column=7, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_nms_max_out = tk.Label(self.tl_parameters, text='NMS maximum output:').grid(row=12, column=6, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_nms_max_out_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_nms_max_output).grid(row=12, column=7, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_coords_type = tk.Label(self.tl_parameters, text='Coordinates type:').grid(row=13, column=6, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_coords_type_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.s_coords_type).grid(row=13, column=7, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_two_for_AR1 = tk.Label(self.tl_parameters, text='Two boxes for AR=1:').grid(row=14, column=6, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_two_for_AR1_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.bool_2_for_1).grid(row=14, column=7, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_clip_boxes = tk.Label(self.tl_parameters, text='Clip boxes:').grid(row=15, column=6, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_clip_boxes_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.bool_clip_boxes).grid(row=15, column=7, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_norm_coords = tk.Label(self.tl_parameters, text='Normalize coordinates:').grid(row=16, column=6, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_norm_coords_s = tk.Label(self.tl_parameters, textvariable=self.controller.options_menu.bool_norm_coords).grid(row=16, column=7, sticky=tk.N+tk.S+tk.E+tk.W)

        self.l_augmentation = tk.Label(self.tl_parameters, text='Data augmentation:', bg='black', fg='white').grid(row=0, column=8, columnspan=2, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_apply_augmentation = tk.Label(self.tl_parameters, text='Apply augmentation:').grid(row=1, column=8, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_apply_augmentation_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.bool_augmentation).grid(row=1, column=9, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_fw_centering = tk.Label(self.tl_parameters, text='Featurewise centering:').grid(row=2, column=8, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_fw_centering_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.bool_fw_centering).grid(row=3, column=9, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_sw_centering = tk.Label(self.tl_parameters, text='Samplewise centering:').grid(row=3, column=8, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_sw_centering_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.bool_sw_centering).grid(row=2, column=9, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_fw_normalization = tk.Label(self.tl_parameters, text='Featurewise normalization:').grid(row=4, column=8, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_fw_normalization_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.bool_fw_normalization).grid(row=4, column=9, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_sw_normalization = tk.Label(self.tl_parameters, text='Samplewise normalization:').grid(row=5, column=8, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_sw_normalization_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.bool_sw_normalization).grid(row=5, column=9, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_width_shift = tk.Label(self.tl_parameters, text='Width shift range:').grid(row=6, column=8, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_width_shift_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.s_width_shift).grid(row=6, column=9, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_height_shift = tk.Label(self.tl_parameters, text='Height shift range:').grid(row=7, column=8, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_height_shift_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.s_height_shift).grid(row=7, column=9, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_rotation = tk.Label(self.tl_parameters, text='Rotation range:').grid(row=8, column=8, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_rotation_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.s_rotation_range).grid(row=8, column=9, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_brightness = tk.Label(self.tl_parameters, text='Brightness range:').grid(row=9, column=8, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_brightness_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.s_brightness_range).grid(row=9, column=9, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_shear = tk.Label(self.tl_parameters, text='Shear range:').grid(row=10, column=8, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_shear_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.s_shear_range).grid(row=10, column=9, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_zoom = tk.Label(self.tl_parameters, text='Zoom range:').grid(row=11, column=8, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_zoom_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.s_zoom_range).grid(row=11, column=9, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_channel_shift = tk.Label(self.tl_parameters, text='Channel shift range:').grid(row=12, column=8, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_channel_shift_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.s_channel_shift_range).grid(row=12, column=9, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_fill_mode = tk.Label(self.tl_parameters, text='Fill mode:').grid(row=13, column=8, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_fill_mode_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.s_fill_mode).grid(row=13, column=9, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_cval = tk.Label(self.tl_parameters, text='Cval:').grid(row=14, column=8, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_cval_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.s_cval).grid(row=14, column=9, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_horizontal_flip = tk.Label(self.tl_parameters, text='Horizontal flip:').grid(row=15, column=8, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_horizontal_flip_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.bool_horizontal_flip).grid(row=15, column=9, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_vertical_flip = tk.Label(self.tl_parameters, text='Vertical flip:').grid(row=16, column=8, sticky=tk.N+tk.S+tk.E+tk.W)
        self.l_vertical_flip_s = tk.Label(self.tl_parameters, textvariable=self.controller.data_menu.bool_vertical_flip).grid(row=16, column=9, sticky=tk.N+tk.S+tk.E+tk.W)

        self.tl_parameters.withdraw()

    def show(self):
        self.tl_parameters.deiconify()
